// @license      MIT
"use strict";const _unsafeWindow=unsafeWindow??window;const IS_DEBUG_LOG=GM_getValue("IS_DEBUG_LOG",false);function setGM(){let debug=console.debug;{var _GM_xmlhttpRequest,_GM_registerMenuCommand,_GM_notification,_GM_addStyle,_GM_openInTab,_GM_info,_GM_setClipboard;{if(typeof GM_xmlhttpRequest!=="undefined"){_GM_xmlhttpRequest=GM_xmlhttpRequest}else if(typeof GM!=="undefined"&&typeof GM.xmlHttpRequest!=="undefined"){_GM_xmlhttpRequest=GM.xmlHttpRequest}else{_GM_xmlhttpRequest=f=>{fetch(f.url,{method:f.method||"GET",body:f.data,headers:f.headers}).then(response=>response.text()).then(data=>{f.onload&&f.onload({response:data})}).catch(f.onerror&&f.onerror())}}}{if(typeof GM_registerMenuCommand!=="undefined"){_GM_registerMenuCommand=GM_registerMenuCommand}else if(typeof GM!=="undefined"&&typeof GM.registerMenuCommand!=="undefined"){_GM_registerMenuCommand=GM.registerMenuCommand}else{_GM_registerMenuCommand=(s,f)=>{debug(s);debug(f)}}}{if(typeof GM_info!=="undefined"){_GM_info=GM_info}else if(typeof GM!=="undefined"&&typeof GM.info!=="undefined"){_GM_info=GM.info}else{_GM_info={script:{}}}}{if(typeof GM_notification!=="undefined"){_GM_notification=GM_notification}else if(typeof GM!=="undefined"&&typeof GM.notification!=="undefined"){_GM_notification=GM.notification}else{_GM_notification=s=>{alert("_GM_notification: "+String(s.text||s))}}}{if(typeof GM_openInTab!=="undefined"){_GM_openInTab=GM_openInTab}else if(typeof GM!=="undefined"&&typeof GM.openInTab!=="undefined"){_GM_openInTab=GM.openInTab}else{_GM_openInTab=(s,t)=>{window.open(s);debug(t)}}}{if(typeof GM_addStyle!=="undefined"){_GM_addStyle=GM_addStyle}else if(typeof GM!=="undefined"&&typeof GM.addStyle!=="undefined"){_GM_addStyle=GM.addStyle}else{_GM_addStyle=CssStr=>{let styleEle=document.createElement("style");styleEle.classList.add("_GM_addStyle");styleEle.innerHTML=CssStr;document.head.appendChild(styleEle);return styleEle}}}{if(typeof GM_setClipboard!=="undefined"){_GM_setClipboard=GM_setClipboard}else if(typeof GM!=="undefined"&&typeof GM.setClipboard!=="undefined"){_GM_setClipboard=GM.setClipboard}else{_GM_setClipboard=(s,i)=>{debug(s);debug(i)}}}}}function removeElement(...args){try{if(args){args.forEach(args=>{if(IS_DEBUG_LOG){console.log("args: ",args);console.log("document.querySelectorAll(args): ",document.querySelectorAll(args))}if(document.querySelectorAll(args).length!==0){document.querySelectorAll(args).forEach(ele=>{ele.remove()})}else{console.debug(args,"is not a Html Element.")}})}}catch(e){console.error(e);return[false,args,e]}return[true,args]}function setMenu(name,fn,def,showMapping){const trueShowMapping={true:"開",false:"關",...showMapping??{}};let support=false;let showName=trueShowMapping[name]??name.replaceAll("_"," ");let getValue=GM_getValue(name);let showValue="No support";if(getValue===undefined&&def!==undefined){GM_setValue(name,def);getValue=def;console.debug(`setMenu: ${name} set default value: ${def}`)}if(typeof getValue==="boolean"){support=true;showValue=getValue.toString()}showValue=trueShowMapping[getValue]??showValue;const trueFn=fn??(support?function(ev){if(typeof getValue==="boolean"){GM_setValue(name,!getValue);window.location.reload()}}:()=>{let t="the type is not supported: "+typeof getValue;console.error(t)});return GM_registerMenuCommand(`${showName}: ${showValue}`,trueFn)}function newEval(stringCode,safety=true){const blackList=["eval","function","let","var","document","alert","navigator","localStorage","sessionStorage","console","XMLHttpRequest","fetch","import","export","async","await","with","Promise",/window\.[0-9a-zA-Z_]+ *=/];if(safety){for(const value of blackList){if(typeof value==="string"){if(stringCode.includes(value)){throw new Error(`不允許的關鍵字或代碼: ${JSON.stringify(value)},在代碼: ${stringCode}`)}}else if(value instanceof RegExp){if(value.test(stringCode)){throw new Error(`不允許的關鍵字或代碼: ${value},在代碼: ${stringCode}`)}}}}return new Function(`${safety?"return":""} ${stringCode}`)()}class i18n{langJson;langList=[];constructor(langJson,lang){this.langJson=langJson;if(lang instanceof Array){this.langList.push(...lang)}else if(typeof lang==="string"){this.langList.push(lang)}}get(key,...args){for(const lang of this.langList){if(this.langJson[lang]&&this.langJson[lang][key]){let text=this.langJson[lang][key];if(args&&args.length>0){text=text.replace(/{(\d+)}/g,(match,number)=>{if(number>=0&&number<args.length){return typeof args[number]==="undefined"?match:args[number]}return match})}return text}}console.warn(`Translation missing for key: "${key}"`);return String(key)}t=this.get}
//# sourceMappingURL=Tools.user.js.map